import java.util.HashSet;

class Node {
    int data;
    Node left, right;

    public Node(int value) {
        data = value;
        left = right = null;
    }
}

class BSTPairSum {
    static void storeInSet(Node root, HashSet<Integer> set) {
        if (root == null) return;
        storeInSet(root.left, set);
        set.add(root.data);
        storeInSet(root.right, set);
    }

    static int countMatchingPairs(Node root, HashSet<Integer> set, int x) {
        if (root == null) return 0;
        int count = (set.contains(x - root.data)) ? 1 : 0;
        count += countMatchingPairs(root.left, set, x);
        count += countMatchingPairs(root.right, set, x);
        return count;
    }

    static int countPairs(Node root1, Node root2, int x) {
        HashSet<Integer> set = new HashSet<>();
        storeInSet(root1, set);
        return countMatchingPairs(root2, set, x);
    }

    public static void main(String[] args) {
        Node root1 = new Node(5);
        root1.left = new Node(3);
        root1.right = new Node(7);
        root1.left.left = new Node(2);
        root1.left.right = new Node(4);
        root1.right.left = new Node(6);
        root1.right.right = new Node(8);

        Node root2 = new Node(10);
        root2.left = new Node(6);
        root2.right = new Node(15);
        root2.left.left = new Node(3);
        root2.left.right = new Node(8);
        root2.right.left = new Node(11);
        root2.right.right = new Node(18);

        int x = 16;
        System.out.println("Count of Pairs: " + countPairs(root1, root2, x));
    }
}
